// /**
//  * Returns a positive BigInteger that is probably prime, with the
//  * specified bitLength. The probability that a BigInteger returned
//  * by this method is composite does not exceed 2<sup>-100</sup>.
//  *
//  * @param  bitLength bitLength of the returned BigInteger.
//  * @param  rnd source of random bits used to select candidates to be
//  *         tested for primality.
//  * @return a BigInteger of {@code bitLength} bits that is probably prime
//  * @throws ArithmeticException {@code bitLength < 2} or {@code bitLength} is too large.
//  * @see    #bitLength()
//  * @since 1.4
//  */
// public static BigInteger probablePrime(int bitLength, Random rnd) {
//     if (bitLength < 2)
//         throw new ArithmeticException("bitLength < 2");

//     return (bitLength < SMALL_PRIME_THRESHOLD ?
//             smallPrime(bitLength, DEFAULT_PRIME_CERTAINTY, rnd) :
//             largePrime(bitLength, DEFAULT_PRIME_CERTAINTY, rnd));
// }
// private static BigInteger smallPrime(int bitLength, int certainty, Random rnd) {
//     int magLen = (bitLength + 31) >>> 5;
//     int temp[] = new int[magLen];
//     int highBit = 1 << ((bitLength+31) & 0x1f);  // High bit of high int
//     int highMask = (highBit << 1) - 1;  // Bits to keep in high int

//     while (true) {
//         // Construct a candidate
//         for (int i=0; i < magLen; i++)
//             temp[i] = rnd.nextInt();
//         temp[0] = (temp[0] & highMask) | highBit;  // Ensure exact length
//         if (bitLength > 2)
//             temp[magLen-1] |= 1;  // Make odd if bitlen > 2

//         BigInteger p = new BigInteger(temp, 1);

//         // Do cheap "pre-test" if applicable
//         if (bitLength > 6) {
//             long r = p.remainder(SMALL_PRIME_PRODUCT).longValue();
//             if ((r%3==0)  || (r%5==0)  || (r%7==0)  || (r%11==0) ||
//                 (r%13==0) || (r%17==0) || (r%19==0) || (r%23==0) ||
//                 (r%29==0) || (r%31==0) || (r%37==0) || (r%41==0))
//                 continue; // Candidate is composite; try another
//         }

//         // All candidates of bitLength 2 and 3 are prime by this point
//         if (bitLength < 4)
//             return p;

//         // Do expensive test if we survive pre-test (or it's inapplicable)
//         if (p.primeToCertainty(certainty, rnd))
//             return p;
//     }
// }

// private static final BigInteger SMALL_PRIME_PRODUCT
//                     = valueOf(3L*5*7*11*13*17*19*23*29*31*37*41);

// /**
//  * Find a random number of the specified bitLength that is probably prime.
//  * This method is more appropriate for larger bitlengths since it uses
//  * a sieve to eliminate most composites before using a more expensive
//  * test.
//  */
// private static BigInteger largePrime(int bitLength, int certainty, Random rnd) {
//     BigInteger p;
//     p = new BigInteger(bitLength, rnd).setBit(bitLength-1);
//     p.mag[p.mag.length-1] &= 0xfffffffe;

//     // Use a sieve length likely to contain the next prime number
//     int searchLen = getPrimeSearchLen(bitLength);
//     BitSieve searchSieve = new BitSieve(p, searchLen);
//     BigInteger candidate = searchSieve.retrieve(p, certainty, rnd);

//     while ((candidate == null) || (candidate.bitLength() != bitLength)) {
//         p = p.add(BigInteger.valueOf(2*searchLen));
//         if (p.bitLength() != bitLength)
//             p = new BigInteger(bitLength, rnd).setBit(bitLength-1);
//         p.mag[p.mag.length-1] &= 0xfffffffe;
//         searchSieve = new BitSieve(p, searchLen);
//         candidate = searchSieve.retrieve(p, certainty, rnd);
//     }
//     return candidate;
// }

// /**
// * Returns the first integer greater than this {@code BigInteger} that
// * is probably prime.  The probability that the number returned by this
// * method is composite does not exceed 2<sup>-100</sup>. This method will
// * never skip over a prime when searching: if it returns {@code p}, there
// * is no prime {@code q} such that {@code this < q < p}.
// *
// * @return the first integer greater than this {@code BigInteger} that
// *         is probably prime.
// * @throws ArithmeticException {@code this < 0} or {@code this} is too large.
// * @since 1.5
// */
// public BigInteger nextProbablePrime() {
//     if (this.signum < 0)
//         throw new ArithmeticException("start < 0: " + this);

//     // Handle trivial cases
//     if ((this.signum == 0) || this.equals(ONE))
//         return TWO;

//     BigInteger result = this.add(ONE);

//     // Fastpath for small numbers
//     if (result.bitLength() < SMALL_PRIME_THRESHOLD) {

//         // Ensure an odd number
//         if (!result.testBit(0))
//             result = result.add(ONE);

//         while (true) {
//             // Do cheap "pre-test" if applicable
//             if (result.bitLength() > 6) {
//                 long r = result.remainder(SMALL_PRIME_PRODUCT).longValue();
//                 if ((r%3==0)  || (r%5==0)  || (r%7==0)  || (r%11==0) ||
//                     (r%13==0) || (r%17==0) || (r%19==0) || (r%23==0) ||
//                     (r%29==0) || (r%31==0) || (r%37==0) || (r%41==0)) {
//                     result = result.add(TWO);
//                     continue; // Candidate is composite; try another
//                 }
//             }

//             // All candidates of bitLength 2 and 3 are prime by this point
//             if (result.bitLength() < 4)
//                 return result;

//             // The expensive test
//             if (result.primeToCertainty(DEFAULT_PRIME_CERTAINTY, null))
//                 return result;

//             result = result.add(TWO);
//         }
//     }

//     // Start at previous even number
//     if (result.testBit(0))
//         result = result.subtract(ONE);

//     // Looking for the next large prime
//     int searchLen = getPrimeSearchLen(result.bitLength());

//     while (true) {
//         BitSieve searchSieve = new BitSieve(result, searchLen);
//         BigInteger candidate = searchSieve.retrieve(result,
//                                                 DEFAULT_PRIME_CERTAINTY, null);
//         if (candidate != null)
//             return candidate;
//         result = result.add(BigInteger.valueOf(2 * searchLen));
//     }
// }

// private static int getPrimeSearchLen(int bitLength) {
//     if (bitLength > PRIME_SEARCH_BIT_LENGTH_LIMIT + 1) {
//         throw new ArithmeticException("Prime search implementation restriction on bitLength");
//     }
//     return bitLength / 20 * 64;
// }

// /**
//  * Returns {@code true} if this BigInteger is probably prime,
//  * {@code false} if it's definitely composite.
//  *
//  * This method assumes bitLength > 2.
//  *
//  * @param  certainty a measure of the uncertainty that the caller is
//  *         willing to tolerate: if the call returns {@code true}
//  *         the probability that this BigInteger is prime exceeds
//  *         {@code (1 - 1/2<sup>certainty</sup>)}.  The execution time of
//  *         this method is proportional to the value of this parameter.
//  * @return {@code true} if this BigInteger is probably prime,
//  *         {@code false} if it's definitely composite.
//  */
// boolean primeToCertainty(int certainty, Random random) {
//     int rounds = 0;
//     int n = (Math.min(certainty, Integer.MAX_VALUE-1)+1)/2;

//     // The relationship between the certainty and the number of rounds
//     // we perform is given in the draft standard ANSI X9.80, "PRIME
//     // NUMBER GENERATION, PRIMALITY TESTING, AND PRIMALITY CERTIFICATES".
//     int sizeInBits = this.bitLength();
//     if (sizeInBits < 100) {
//         rounds = 50;
//         rounds = n < rounds ? n : rounds;
//         return passesMillerRabin(rounds, random);
//     }

//     if (sizeInBits < 256) {
//         rounds = 27;
//     } else if (sizeInBits < 512) {
//         rounds = 15;
//     } else if (sizeInBits < 768) {
//         rounds = 8;
//     } else if (sizeInBits < 1024) {
//         rounds = 4;
//     } else {
//         rounds = 2;
//     }
//     rounds = n < rounds ? n : rounds;

//     return passesMillerRabin(rounds, random) && passesLucasLehmer();
// }

// /**
//  * Returns true iff this BigInteger is a Lucas-Lehmer probable prime.
//  *
//  * The following assumptions are made:
//  * This BigInteger is a positive, odd number.
//  */
// private boolean passesLucasLehmer() {
//     BigInteger thisPlusOne = this.add(ONE);

//     // Step 1
//     int d = 5;
//     while (jacobiSymbol(d, this) != -1) {
//         // 5, -7, 9, -11, ...
//         d = (d < 0) ? Math.abs(d)+2 : -(d+2);
//     }

//     // Step 2
//     BigInteger u = lucasLehmerSequence(d, thisPlusOne, this);

//     // Step 3
//     return u.mod(this).equals(ZERO);
// }

// /**
//  * Computes Jacobi(p,n).
//  * Assumes n positive, odd, n>=3.
//  */
// private static int jacobiSymbol(int p, BigInteger n) {
//     if (p == 0)
//         return 0;

//     // Algorithm and comments adapted from Colin Plumb's C library.
//     int j = 1;
//     int u = n.mag[n.mag.length-1];

//     // Make p positive
//     if (p < 0) {
//         p = -p;
//         int n8 = u & 7;
//         if ((n8 == 3) || (n8 == 7))
//             j = -j; // 3 (011) or 7 (111) mod 8
//     }

//     // Get rid of factors of 2 in p
//     while ((p & 3) == 0)
//         p >>= 2;
//     if ((p & 1) == 0) {
//         p >>= 1;
//         if (((u ^ (u>>1)) & 2) != 0)
//             j = -j; // 3 (011) or 5 (101) mod 8
//     }
//     if (p == 1)
//         return j;
//     // Then, apply quadratic reciprocity
//     if ((p & u & 2) != 0)   // p = u = 3 (mod 4)?
//         j = -j;
//     // And reduce u mod p
//     u = n.mod(BigInteger.valueOf(p)).intValue();

//     // Now compute Jacobi(u,p), u < p
//     while (u != 0) {
//         while ((u & 3) == 0)
//             u >>= 2;
//         if ((u & 1) == 0) {
//             u >>= 1;
//             if (((p ^ (p>>1)) & 2) != 0)
//                 j = -j;     // 3 (011) or 5 (101) mod 8
//         }
//         if (u == 1)
//             return j;
//         // Now both u and p are odd, so use quadratic reciprocity
//         assert (u < p);
//         int t = u; u = p; p = t;
//         if ((u & p & 2) != 0) // u = p = 3 (mod 4)?
//             j = -j;
//         // Now u >= p, so it can be reduced
//         u %= p;
//     }
//     return 0;
// }

// private static BigInteger lucasLehmerSequence(int z, BigInteger k, BigInteger n) {
//     BigInteger d = BigInteger.valueOf(z);
//     BigInteger u = ONE; BigInteger u2;
//     BigInteger v = ONE; BigInteger v2;

//     for (int i=k.bitLength()-2; i >= 0; i--) {
//         u2 = u.multiply(v).mod(n);

//         v2 = v.square().add(d.multiply(u.square())).mod(n);
//         if (v2.testBit(0))
//             v2 = v2.subtract(n);

//         v2 = v2.shiftRight(1);

//         u = u2; v = v2;
//         if (k.testBit(i)) {
//             u2 = u.add(v).mod(n);
//             if (u2.testBit(0))
//                 u2 = u2.subtract(n);

//             u2 = u2.shiftRight(1);
//             v2 = v.add(d.multiply(u)).mod(n);
//             if (v2.testBit(0))
//                 v2 = v2.subtract(n);
//             v2 = v2.shiftRight(1);

//             u = u2; v = v2;
//         }
//     }
//     return u;
// }

// /**
//  * Returns true iff this BigInteger passes the specified number of
//  * Miller-Rabin tests. This test is taken from the DSA spec (NIST FIPS
//  * 186-2).
//  *
//  * The following assumptions are made:
//  * This BigInteger is a positive, odd number greater than 2.
//  * iterations<=50.
//  */
// private boolean passesMillerRabin(int iterations, Random rnd) {
//     // Find a and m such that m is odd and this == 1 + 2**a * m
//     BigInteger thisMinusOne = this.subtract(ONE);
//     BigInteger m = thisMinusOne;
//     int a = m.getLowestSetBit();
//     m = m.shiftRight(a);

//     // Do the tests
//     if (rnd == null) {
//         rnd = ThreadLocalRandom.current();
//     }
//     for (int i=0; i < iterations; i++) {
//         // Generate a uniform random on (1, this)
//         BigInteger b;
//         do {
//             b = new BigInteger(this.bitLength(), rnd);
//         } while (b.compareTo(ONE) <= 0 || b.compareTo(this) >= 0);

//         int j = 0;
//         BigInteger z = b.modPow(m, this);
//         while (!((j == 0 && z.equals(ONE)) || z.equals(thisMinusOne))) {
//             if (j > 0 && z.equals(ONE) || ++j == a)
//                 return false;
//             z = z.modPow(TWO, this);
//         }
//     }
//     return true;
// }

    // Minimum size in bits that the requested prime number has
    // before we use the large prime number generating algorithms.
    // The cutoff of 95 was chosen empirically for best performance.
    private static final int SMALL_PRIME_THRESHOLD = 95;

    // Certainty required to meet the spec of probablePrime
    private static final int DEFAULT_PRIME_CERTAINTY = 100;

    /**
     * Returns {@code true} if this BigInteger is probably prime,
     * {@code false} if it's definitely composite.  If
     * {@code certainty} is &le; 0, {@code true} is
     * returned.
     *
     * @param  certainty a measure of the uncertainty that the caller is
     *         willing to tolerate: if the call returns {@code true}
     *         the probability that this BigInteger is prime exceeds
     *         (1 - 1/2<sup>{@code certainty}</sup>).  The execution time of
     *         this method is proportional to the value of this parameter.
     * @return {@code true} if this BigInteger is probably prime,
     *         {@code false} if it's definitely composite.
     */
    public boolean isProbablePrime(int certainty) {
        if (certainty <= 0)
            return true;
        BigInteger w = this.abs();
        if (w.equals(TWO))
            return true;
        if (!w.testBit(0) || w.equals(ONE))
            return false;

        return w.primeToCertainty(certainty, null);
    }