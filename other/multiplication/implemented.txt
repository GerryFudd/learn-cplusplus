

// /**
//  * Returns a BigInteger whose value is {@code (this * val)}.
//  *
//  * @implNote An implementation may offer better algorithmic
//  * performance when {@code val == this}.
//  *
//  * @param  val value to be multiplied by this BigInteger.
//  * @return {@code this * val}
//  */
// public BigInteger multiply(BigInteger val) {
//     return multiply(val, false);
// }

// private BigInteger multiply(BigInteger val, boolean isRecursion) {
//     if (val.signum == 0 || signum == 0)
//         return ZERO;
//     if ((xlen < TOOM_COOK_THRESHOLD) && (ylen < TOOM_COOK_THRESHOLD)) {
//         return multiplyKaratsuba(this, val);
//     }
//      ...
// }

// @HotSpotIntrinsicCandidate
// private static int[] implMultiplyToLen(int[] x, int xlen, int[] y, int ylen, int[] z) {
//     int xstart = xlen - 1;
//     int ystart = ylen - 1;

//     if (z == null || z.length < (xlen+ ylen))
//             z = new int[xlen+ylen];

//     long carry = 0;
//     for (int j=ystart, k=ystart+1+xstart; j >= 0; j--, k--) {
//         long product = (y[j] & LONG_MASK) *
//                         (x[xstart] & LONG_MASK) + carry;
//         z[k] = (int)product;
//         carry = product >>> 32;
//     }
//     z[xstart] = (int)carry;

//     for (int i = xstart-1; i >= 0; i--) {
//         carry = 0;
//         for (int j=ystart, k=ystart+1+i; j >= 0; j--, k--) {
//             long product = (y[j] & LONG_MASK) *
//                             (x[i] & LONG_MASK) +
//                             (z[k] & LONG_MASK) + carry;
//             z[k] = (int)product;
//             carry = product >>> 32;
//         }
//         z[i] = (int)carry;
//     }
//     return z;
// }

// /**
//  * Returns a new BigInteger representing mag.length-n upper
//  * ints of the number.  This is used by Karatsuba multiplication and
//  * Karatsuba squaring.
//  */
// private BigInteger getUpper(int n) {
//     int len = mag.length;

//     if (len <= n) {
//         return ZERO;
//     }

//     int upperLen = len - n;
//     int upperInts[] = new int[upperLen];
//     System.arraycopy(mag, 0, upperInts, 0, upperLen);

//     return new BigInteger(trustedStripLeadingZeroInts(upperInts), 1);
// }

// /**
//  * Returns a new BigInteger representing n lower ints of the number.
//  * This is used by Karatsuba multiplication and Karatsuba squaring.
//  */
// private BigInteger getLower(int n) {
//     int len = mag.length;

//     if (len <= n) {
//         return abs();
//     }

//     int lowerInts[] = new int[n];
//     System.arraycopy(mag, len-n, lowerInts, 0, n);

//     return new BigInteger(trustedStripLeadingZeroInts(lowerInts), 1);
// }

// /**
//  * Multiplies two BigIntegers using the Karatsuba multiplication
//  * algorithm.  This is a recursive divide-and-conquer algorithm which is
//  * more efficient for large numbers than what is commonly called the
//  * "grade-school" algorithm used in multiplyToLen.  If the numbers to be
//  * multiplied have length n, the "grade-school" algorithm has an
//  * asymptotic complexity of O(n^2).  In contrast, the Karatsuba algorithm
//  * has complexity of O(n^(log2(3))), or O(n^1.585).  It achieves this
//  * increased performance by doing 3 multiplies instead of 4 when
//  * evaluating the product.  As it has some overhead, should be used when
//  * both numbers are larger than a certain threshold (found
//  * experimentally).
//  *
//  * See:  http://en.wikipedia.org/wiki/Karatsuba_algorithm
//  */
// private static BigInteger multiplyKaratsuba(BigInteger x, BigInteger y) {
//     int xlen = x.mag.length;
//     int ylen = y.mag.length;

//     // The number of ints in each half of the number.
//     int half = (Math.max(xlen, ylen)+1) / 2;

//     // xl and yl are the lower halves of x and y respectively,
//     // xh and yh are the upper halves.
//     BigInteger xl = x.getLower(half);
//     BigInteger xh = x.getUpper(half);
//     BigInteger yl = y.getLower(half);
//     BigInteger yh = y.getUpper(half);

//     BigInteger p1 = xh.multiply(yh);  // p1 = xh*yh
//     BigInteger p2 = xl.multiply(yl);  // p2 = xl*yl

//     // p3=(xh+xl)*(yh+yl)
//     BigInteger p3 = xh.add(xl).multiply(yh.add(yl));

//     // result = p1 * 2^(32*2*half) + (p3 - p1 - p2) * 2^(32*half) + p2
//     BigInteger result = p1.shiftLeft(32*half).add(p3.subtract(p1).subtract(p2)).shiftLeft(32*half).add(p2);

//     if (x.signum != y.signum) {
//         return result.negate();
//     } else {
//         return result;
//     }
// }
