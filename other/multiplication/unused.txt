

// private static void multiplyToLenCheck(int[] array, int length) {
//     if (length <= 0) {
//         return;  // not an error because multiplyToLen won't execute if len <= 0
//     }

//     Objects.requireNonNull(array);

//     if (length > array.length) {
//         throw new ArrayIndexOutOfBoundsException(length - 1);
//     }
// }

// /**
//  * Multiplies int arrays x and y to the specified lengths and places
//  * the result into z. There will be no leading zeros in the resultant array.
//  */
// private static int[] multiplyToLen(int[] x, int xlen, int[] y, int ylen, int[] z) {
//     multiplyToLenCheck(x, xlen);
//     multiplyToLenCheck(y, ylen);
//     return implMultiplyToLen(x, xlen, y, ylen, z);
// }

// /**
//  * Package private methods used by BigDecimal code to multiply a BigInteger
//  * with a long. Assumes v is not equal to INFLATED.
//  */
// BigInteger multiply(long v) {
//     if (v == 0 || signum == 0)
//         return ZERO;
//     if (v == BigDecimal.INFLATED)
//         return multiply(BigInteger.valueOf(v));
//     int rsign = (v > 0 ? signum : -signum);
//     if (v < 0)
//         v = -v;
//     long dh = v >>> 32;      // higher order bits
//     long dl = v & LONG_MASK; // lower order bits

//     int xlen = mag.length;
//     int[] value = mag;
//     int[] rmag = (dh == 0L) ? (new int[xlen + 1]) : (new int[xlen + 2]);
//     long carry = 0;
//     int rstart = rmag.length - 1;
//     for (int i = xlen - 1; i >= 0; i--) {
//         long product = (value[i] & LONG_MASK) * dl + carry;
//         rmag[rstart--] = (int)product;
//         carry = product >>> 32;
//     }
//     rmag[rstart] = (int)carry;
//     if (dh != 0L) {
//         carry = 0;
//         rstart = rmag.length - 2;
//         for (int i = xlen - 1; i >= 0; i--) {
//             long product = (value[i] & LONG_MASK) * dh +
//                 (rmag[rstart] & LONG_MASK) + carry;
//             rmag[rstart--] = (int)product;
//             carry = product >>> 32;
//         }
//         rmag[0] = (int)carry;
//     }
//     if (carry == 0L)
//         rmag = java.util.Arrays.copyOfRange(rmag, 1, rmag.length);
//     return new BigInteger(rmag, rsign);
// }