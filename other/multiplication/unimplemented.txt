// 
// Multiply x array times word y in place, and add word z
// private static void destructiveMulAdd(int[] x, int y, int z) {
//     // Perform the multiplication word by word
//     long ylong = y & LONG_MASK;
//     long zlong = z & LONG_MASK;
//     int len = x.length;

//     long product = 0;
//     long carry = 0;
//     for (int i = len-1; i >= 0; i--) {
//         product = ylong * (x[i] & LONG_MASK) + carry;
//         x[i] = (int)product;
//         carry = product >>> 32;
//     }

//     // Perform the addition
//     long sum = (x[len-1] & LONG_MASK) + zlong;
//     x[len-1] = (int)sum;
//     carry = sum >>> 32;
//     for (int i = len-2; i >= 0; i--) {
//         sum = (x[i] & LONG_MASK) + carry;
//         x[i] = (int)sum;
//         carry = sum >>> 32;
//     }
// }

// /**
//  * Returns a BigInteger whose value is {@code (this * val)}.  If
//  * the invocation is recursive certain overflow checks are skipped.
//  *
//  * @param  val value to be multiplied by this BigInteger.
//  * @param  isRecursion whether this is a recursive invocation
//  * @return {@code this * val}
//  */
// private BigInteger multiply(BigInteger val, boolean isRecursion) {
//     if (val.signum == 0 || signum == 0)
//         return ZERO;

//     int xlen = mag.length;

//     if (val == this && xlen > MULTIPLY_SQUARE_THRESHOLD) {
//         return square();
//     }

//     int ylen = val.mag.length;

//     if ((xlen < KARATSUBA_THRESHOLD) || (ylen < KARATSUBA_THRESHOLD)) {
//         int resultSign = signum == val.signum ? 1 : -1;
//         if (val.mag.length == 1) {
//             return multiplyByInt(mag,val.mag[0], resultSign);
//         }
//         if (mag.length == 1) {
//             return multiplyByInt(val.mag,mag[0], resultSign);
//         }
//         int[] result = multiplyToLen(mag, xlen,
//                                         val.mag, ylen, null);
//         result = trustedStripLeadingZeroInts(result);
//         return new BigInteger(result, resultSign);
//     } else {
//         if ((xlen < TOOM_COOK_THRESHOLD) && (ylen < TOOM_COOK_THRESHOLD)) {
//             return multiplyKaratsuba(this, val);
//         } else {
//             //
//             // In "Hacker's Delight" section 2-13, p.33, it is explained
//             // that if x and y are unsigned 32-bit quantities and m and n
//             // are their respective numbers of leading zeros within 32 bits,
//             // then the number of leading zeros within their product as a
//             // 64-bit unsigned quantity is either m + n or m + n + 1. If
//             // their product is not to overflow, it cannot exceed 32 bits,
//             // and so the number of leading zeros of the product within 64
//             // bits must be at least 32, i.e., the leftmost set bit is at
//             // zero-relative position 31 or less.
//             //
//             // From the above there are three cases:
//             //
//             //     m + n    leftmost set bit    condition
//             //     -----    ----------------    ---------
//             //     >= 32    x <= 64 - 32 = 32   no overflow
//             //     == 31    x >= 64 - 32 = 32   possible overflow
//             //     <= 30    x >= 64 - 31 = 33   definite overflow
//             //
//             // The "possible overflow" condition cannot be detected by
//             // examning data lengths alone and requires further calculation.
//             //
//             // By analogy, if 'this' and 'val' have m and n as their
//             // respective numbers of leading zeros within 32*MAX_MAG_LENGTH
//             // bits, then:
//             //
//             //     m + n >= 32*MAX_MAG_LENGTH        no overflow
//             //     m + n == 32*MAX_MAG_LENGTH - 1    possible overflow
//             //     m + n <= 32*MAX_MAG_LENGTH - 2    definite overflow
//             //
//             // Note however that if the number of ints in the result
//             // were to be MAX_MAG_LENGTH and mag[0] < 0, then there would
//             // be overflow. As a result the leftmost bit (of mag[0]) cannot
//             // be used and the constraints must be adjusted by one bit to:
//             //
//             //     m + n >  32*MAX_MAG_LENGTH        no overflow
//             //     m + n == 32*MAX_MAG_LENGTH        possible overflow
//             //     m + n <  32*MAX_MAG_LENGTH        definite overflow
//             //
//             // The foregoing leading zero-based discussion is for clarity
//             // only. The actual calculations use the estimated bit length
//             // of the product as this is more natural to the internal
//             // array representation of the magnitude which has no leading
//             // zero elements.
//             //
//             if (!isRecursion) {
//                 // The bitLength() instance method is not used here as we
//                 // are only considering the magnitudes as non-negative. The
//                 // Toom-Cook multiplication algorithm determines the sign
//                 // at its end from the two signum values.
//                 if ((long)bitLength(mag, mag.length) +
//                     (long)bitLength(val.mag, val.mag.length) >
//                     32L*MAX_MAG_LENGTH) {
//                     reportOverflow();
//                 }
//             }

//             return multiplyToomCook3(this, val);
//         }
//     }
// }

    private static void reportOverflow() {
        throw new ArithmeticException("BigInteger would overflow supported range");
    }

// private static BigInteger multiplyByInt(int[] x, int y, int sign) {
//     if (Integer.bitCount(y) == 1) {
//         return new BigInteger(shiftLeft(x,Integer.numberOfTrailingZeros(y)), sign);
//     }
//     int xlen = x.length;
//     int[] rmag =  new int[xlen + 1];
//     long carry = 0;
//     long yl = y & LONG_MASK;
//     int rstart = rmag.length - 1;
//     for (int i = xlen - 1; i >= 0; i--) {
//         long product = (x[i] & LONG_MASK) * yl + carry;
//         rmag[rstart--] = (int)product;
//         carry = product >>> 32;
//     }
//     if (carry == 0L) {
//         rmag = java.util.Arrays.copyOfRange(rmag, 1, rmag.length);
//     } else {
//         rmag[rstart] = (int)carry;
//     }
//     return new BigInteger(rmag, sign);
// }

// /**
//  * Package private methods used by BigDecimal code to multiply a BigInteger
//  * with a long. Assumes v is not equal to INFLATED.
//  */
// BigInteger multiply(long v) {
//     if (v == 0 || signum == 0)
//         return ZERO;
//     if (v == BigDecimal.INFLATED)
//         return multiply(BigInteger.valueOf(v));
//     int rsign = (v > 0 ? signum : -signum);
//     if (v < 0)
//         v = -v;
//     long dh = v >>> 32;      // higher order bits
//     long dl = v & LONG_MASK; // lower order bits

//     int xlen = mag.length;
//     int[] value = mag;
//     int[] rmag = (dh == 0L) ? (new int[xlen + 1]) : (new int[xlen + 2]);
//     long carry = 0;
//     int rstart = rmag.length - 1;
//     for (int i = xlen - 1; i >= 0; i--) {
//         long product = (value[i] & LONG_MASK) * dl + carry;
//         rmag[rstart--] = (int)product;
//         carry = product >>> 32;
//     }
//     rmag[rstart] = (int)carry;
//     if (dh != 0L) {
//         carry = 0;
//         rstart = rmag.length - 2;
//         for (int i = xlen - 1; i >= 0; i--) {
//             long product = (value[i] & LONG_MASK) * dh +
//                 (rmag[rstart] & LONG_MASK) + carry;
//             rmag[rstart--] = (int)product;
//             carry = product >>> 32;
//         }
//         rmag[0] = (int)carry;
//     }
//     if (carry == 0L)
//         rmag = java.util.Arrays.copyOfRange(rmag, 1, rmag.length);
//     return new BigInteger(rmag, rsign);
// }

// /**
//  * Multiplies int arrays x and y to the specified lengths and places
//  * the result into z. There will be no leading zeros in the resultant array.
//  */
// private static int[] multiplyToLen(int[] x, int xlen, int[] y, int ylen, int[] z) {
//     multiplyToLenCheck(x, xlen);
//     multiplyToLenCheck(y, ylen);
//     return implMultiplyToLen(x, xlen, y, ylen, z);
// }

// @HotSpotIntrinsicCandidate
// private static int[] implMultiplyToLen(int[] x, int xlen, int[] y, int ylen, int[] z) {
//     int xstart = xlen - 1;
//     int ystart = ylen - 1;

//     if (z == null || z.length < (xlen+ ylen))
//             z = new int[xlen+ylen];

//     long carry = 0;
//     for (int j=ystart, k=ystart+1+xstart; j >= 0; j--, k--) {
//         long product = (y[j] & LONG_MASK) *
//                         (x[xstart] & LONG_MASK) + carry;
//         z[k] = (int)product;
//         carry = product >>> 32;
//     }
//     z[xstart] = (int)carry;

//     for (int i = xstart-1; i >= 0; i--) {
//         carry = 0;
//         for (int j=ystart, k=ystart+1+i; j >= 0; j--, k--) {
//             long product = (y[j] & LONG_MASK) *
//                             (x[i] & LONG_MASK) +
//                             (z[k] & LONG_MASK) + carry;
//             z[k] = (int)product;
//             carry = product >>> 32;
//         }
//         z[i] = (int)carry;
//     }
//     return z;
// }

// private static void multiplyToLenCheck(int[] array, int length) {
//     if (length <= 0) {
//         return;  // not an error because multiplyToLen won't execute if len <= 0
//     }

//     Objects.requireNonNull(array);

//     if (length > array.length) {
//         throw new ArrayIndexOutOfBoundsException(length - 1);
//     }
// }

// /**
//  * Multiplies two BigIntegers using the Karatsuba multiplication
//  * algorithm.  This is a recursive divide-and-conquer algorithm which is
//  * more efficient for large numbers than what is commonly called the
//  * "grade-school" algorithm used in multiplyToLen.  If the numbers to be
//  * multiplied have length n, the "grade-school" algorithm has an
//  * asymptotic complexity of O(n^2).  In contrast, the Karatsuba algorithm
//  * has complexity of O(n^(log2(3))), or O(n^1.585).  It achieves this
//  * increased performance by doing 3 multiplies instead of 4 when
//  * evaluating the product.  As it has some overhead, should be used when
//  * both numbers are larger than a certain threshold (found
//  * experimentally).
//  *
//  * See:  http://en.wikipedia.org/wiki/Karatsuba_algorithm
//  */
// private static BigInteger multiplyKaratsuba(BigInteger x, BigInteger y) {
//     int xlen = x.mag.length;
//     int ylen = y.mag.length;

//     // The number of ints in each half of the number.
//     int half = (Math.max(xlen, ylen)+1) / 2;

//     // xl and yl are the lower halves of x and y respectively,
//     // xh and yh are the upper halves.
//     BigInteger xl = x.getLower(half);
//     BigInteger xh = x.getUpper(half);
//     BigInteger yl = y.getLower(half);
//     BigInteger yh = y.getUpper(half);

//     BigInteger p1 = xh.multiply(yh);  // p1 = xh*yh
//     BigInteger p2 = xl.multiply(yl);  // p2 = xl*yl

//     // p3=(xh+xl)*(yh+yl)
//     BigInteger p3 = xh.add(xl).multiply(yh.add(yl));

//     // result = p1 * 2^(32*2*half) + (p3 - p1 - p2) * 2^(32*half) + p2
//     BigInteger result = p1.shiftLeft(32*half).add(p3.subtract(p1).subtract(p2)).shiftLeft(32*half).add(p2);

//     if (x.signum != y.signum) {
//         return result.negate();
//     } else {
//         return result;
//     }
// }

// /**
//  * Multiplies two BigIntegers using a 3-way Toom-Cook multiplication
//  * algorithm.  This is a recursive divide-and-conquer algorithm which is
//  * more efficient for large numbers than what is commonly called the
//  * "grade-school" algorithm used in multiplyToLen.  If the numbers to be
//  * multiplied have length n, the "grade-school" algorithm has an
//  * asymptotic complexity of O(n^2).  In contrast, 3-way Toom-Cook has a
//  * complexity of about O(n^1.465).  It achieves this increased asymptotic
//  * performance by breaking each number into three parts and by doing 5
//  * multiplies instead of 9 when evaluating the product.  Due to overhead
//  * (additions, shifts, and one division) in the Toom-Cook algorithm, it
//  * should only be used when both numbers are larger than a certain
//  * threshold (found experimentally).  This threshold is generally larger
//  * than that for Karatsuba multiplication, so this algorithm is generally
//  * only used when numbers become significantly larger.
//  *
//  * The algorithm used is the "optimal" 3-way Toom-Cook algorithm outlined
//  * by Marco Bodrato.
//  *
//  *  See: http://bodrato.it/toom-cook/
//  *       http://bodrato.it/papers/#WAIFI2007
//  *
//  * "Towards Optimal Toom-Cook Multiplication for Univariate and
//  * Multivariate Polynomials in Characteristic 2 and 0." by Marco BODRATO;
//  * In C.Carlet and B.Sunar, Eds., "WAIFI'07 proceedings", p. 116-133,
//  * LNCS #4547. Springer, Madrid, Spain, June 21-22, 2007.
//  *
//  */
// private static BigInteger multiplyToomCook3(BigInteger a, BigInteger b) {
//     int alen = a.mag.length;
//     int blen = b.mag.length;

//     int largest = Math.max(alen, blen);

//     // k is the size (in ints) of the lower-order slices.
//     int k = (largest+2)/3;   // Equal to ceil(largest/3)

//     // r is the size (in ints) of the highest-order slice.
//     int r = largest - 2*k;

//     // Obtain slices of the numbers. a2 and b2 are the most significant
//     // bits of the numbers a and b, and a0 and b0 the least significant.
//     BigInteger a0, a1, a2, b0, b1, b2;
//     a2 = a.getToomSlice(k, r, 0, largest);
//     a1 = a.getToomSlice(k, r, 1, largest);
//     a0 = a.getToomSlice(k, r, 2, largest);
//     b2 = b.getToomSlice(k, r, 0, largest);
//     b1 = b.getToomSlice(k, r, 1, largest);
//     b0 = b.getToomSlice(k, r, 2, largest);

//     BigInteger v0, v1, v2, vm1, vinf, t1, t2, tm1, da1, db1;

//     v0 = a0.multiply(b0, true);
//     da1 = a2.add(a0);
//     db1 = b2.add(b0);
//     vm1 = da1.subtract(a1).multiply(db1.subtract(b1), true);
//     da1 = da1.add(a1);
//     db1 = db1.add(b1);
//     v1 = da1.multiply(db1, true);
//     v2 = da1.add(a2).shiftLeft(1).subtract(a0).multiply(
//             db1.add(b2).shiftLeft(1).subtract(b0), true);
//     vinf = a2.multiply(b2, true);

//     // The algorithm requires two divisions by 2 and one by 3.
//     // All divisions are known to be exact, that is, they do not produce
//     // remainders, and all results are positive.  The divisions by 2 are
//     // implemented as right shifts which are relatively efficient, leaving
//     // only an exact division by 3, which is done by a specialized
//     // linear-time algorithm.
//     t2 = v2.subtract(vm1).exactDivideBy3();
//     tm1 = v1.subtract(vm1).shiftRight(1);
//     t1 = v1.subtract(v0);
//     t2 = t2.subtract(t1).shiftRight(1);
//     t1 = t1.subtract(tm1).subtract(vinf);
//     t2 = t2.subtract(vinf.shiftLeft(1));
//     tm1 = tm1.subtract(t2);

//     // Number of bits to shift left.
//     int ss = k*32;

//     BigInteger result = vinf.shiftLeft(ss).add(t2).shiftLeft(ss).add(t1).shiftLeft(ss).add(tm1).shiftLeft(ss).add(v0);

//     if (a.signum != b.signum) {
//         return result.negate();
//     } else {
//         return result;
//     }
// }


// /**
//  * Returns a slice of a BigInteger for use in Toom-Cook multiplication.
//  *
//  * @param lowerSize The size of the lower-order bit slices.
//  * @param upperSize The size of the higher-order bit slices.
//  * @param slice The index of which slice is requested, which must be a
//  * number from 0 to size-1. Slice 0 is the highest-order bits, and slice
//  * size-1 are the lowest-order bits. Slice 0 may be of different size than
//  * the other slices.
//  * @param fullsize The size of the larger integer array, used to align
//  * slices to the appropriate position when multiplying different-sized
//  * numbers.
//  */
// private BigInteger getToomSlice(int lowerSize, int upperSize, int slice,
//                                 int fullsize) {
//     int start, end, sliceSize, len, offset;

//     len = mag.length;
//     offset = fullsize - len;

//     if (slice == 0) {
//         start = 0 - offset;
//         end = upperSize - 1 - offset;
//     } else {
//         start = upperSize + (slice-1)*lowerSize - offset;
//         end = start + lowerSize - 1;
//     }

//     if (start < 0) {
//         start = 0;
//     }
//     if (end < 0) {
//         return ZERO;
//     }

//     sliceSize = (end-start) + 1;

//     if (sliceSize <= 0) {
//         return ZERO;
//     }

//     // While performing Toom-Cook, all slices are positive and
//     // the sign is adjusted when the final number is composed.
//     if (start == 0 && sliceSize >= len) {
//         return this.abs();
//     }

//     int intSlice[] = new int[sliceSize];
//     System.arraycopy(mag, start, intSlice, 0, sliceSize);

//     return new BigInteger(trustedStripLeadingZeroInts(intSlice), 1);
// }

// /**
//  * Does an exact division (that is, the remainder is known to be zero)
//  * of the specified number by 3.  This is used in Toom-Cook
//  * multiplication.  This is an efficient algorithm that runs in linear
//  * time.  If the argument is not exactly divisible by 3, results are
//  * undefined.  Note that this is expected to be called with positive
//  * arguments only.
//  */
// private BigInteger exactDivideBy3() {
//     int len = mag.length;
//     int[] result = new int[len];
//     long x, w, q, borrow;
//     borrow = 0L;
//     for (int i=len-1; i >= 0; i--) {
//         x = (mag[i] & LONG_MASK);
//         w = x - borrow;
//         if (borrow > x) {      // Did we make the number go negative?
//             borrow = 1L;
//         } else {
//             borrow = 0L;
//         }

//         // 0xAAAAAAAB is the modular inverse of 3 (mod 2^32).  Thus,
//         // the effect of this is to divide by 3 (mod 2^32).
//         // This is much faster than division on most architectures.
//         q = (w * 0xAAAAAAABL) & LONG_MASK;
//         result[i] = (int) q;

//         // Now check the borrow. The second check can of course be
//         // eliminated if the first fails.
//         if (q >= 0x55555556L) {
//             borrow++;
//             if (q >= 0xAAAAAAABL)
//                 borrow++;
//         }
//     }
//     result = trustedStripLeadingZeroInts(result);
//     return new BigInteger(result, signum);
// }

// /**
//  * Returns a new BigInteger representing mag.length-n upper
//  * ints of the number.  This is used by Karatsuba multiplication and
//  * Karatsuba squaring.
//  */
// private BigInteger getUpper(int n) {
//     int len = mag.length;

//     if (len <= n) {
//         return ZERO;
//     }

//     int upperLen = len - n;
//     int upperInts[] = new int[upperLen];
//     System.arraycopy(mag, 0, upperInts, 0, upperLen);

//     return new BigInteger(trustedStripLeadingZeroInts(upperInts), 1);
// }

// /**
//  * Returns a new BigInteger representing n lower ints of the number.
//  * This is used by Karatsuba multiplication and Karatsuba squaring.
//  */
// private BigInteger getLower(int n) {
//     int len = mag.length;

//     if (len <= n) {
//         return abs();
//     }

//     int lowerInts[] = new int[n];
//     System.arraycopy(mag, len-n, lowerInts, 0, n);

//     return new BigInteger(trustedStripLeadingZeroInts(lowerInts), 1);
// }