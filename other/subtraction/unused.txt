// private static int[] subtract(long val, int[] little) {
//     int highWord = (int)(val >>> 32);
//     if (highWord == 0) {
//         int result[] = new int[1];
//         result[0] = (int)(val - (little[0] & LONG_MASK));
//         return result;
//     } else {
//         int result[] = new int[2];
//         if (little.length == 1) {
//             long difference = ((int)val & LONG_MASK) - (little[0] & LONG_MASK);
//             result[1] = (int)difference;
//             // Subtract remainder of longer number while borrow propagates
//             boolean borrow = (difference >> 32 != 0);
//             if (borrow) {
//                 result[0] = highWord - 1;
//             } else {        // Copy remainder of longer number
//                 result[0] = highWord;
//             }
//             return result;
//         } else { // little.length == 2
//             long difference = ((int)val & LONG_MASK) - (little[1] & LONG_MASK);
//             result[1] = (int)difference;
//             difference = (highWord & LONG_MASK) - (little[0] & LONG_MASK) + (difference >> 32);
//             result[0] = (int)difference;
//             return result;
//         }
//     }
// }

// /**
//  * Subtracts the contents of the second argument (val) from the
//  * first (big).  The first int array (big) must represent a larger number
//  * than the second.  This method allocates the space necessary to hold the
//  * answer.
//  * assumes val &gt;= 0
//  */
// private static int[] subtract(int[] big, long val) {
//     int highWord = (int)(val >>> 32);
//     int bigIndex = big.length;
//     int result[] = new int[bigIndex];
//     long difference = 0;

//     if (highWord == 0) {
//         difference = (big[--bigIndex] & LONG_MASK) - val;
//         result[bigIndex] = (int)difference;
//     } else {
//         difference = (big[--bigIndex] & LONG_MASK) - (val & LONG_MASK);
//         result[bigIndex] = (int)difference;
//         difference = (big[--bigIndex] & LONG_MASK) - (highWord & LONG_MASK) + (difference >> 32);
//         result[bigIndex] = (int)difference;
//     }

//     // Subtract remainder of longer number while borrow propagates
//     boolean borrow = (difference >> 32 != 0);
//     while (bigIndex > 0 && borrow)
//         borrow = ((result[--bigIndex] = big[bigIndex] - 1) == -1);

//     // Copy remainder of longer number
//     while (bigIndex > 0)
//         result[--bigIndex] = big[bigIndex];

//     return result;
// }