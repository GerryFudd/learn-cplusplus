

// /**
//  * Returns a BigInteger whose value is {@code (this - val)}.
//  *
//  * @param  val value to be subtracted from this BigInteger.
//  * @return {@code this - val}
//  */
// public BigInteger subtract(BigInteger val) {
//     if (val.signum == 0)
//         return this;
//     if (signum == 0)
//         return val.negate();
//     if (val.signum != signum)
//         return new BigInteger(add(mag, val.mag), signum);

//     int cmp = compareMagnitude(val);
//     if (cmp == 0)
//         return ZERO;
//     int[] resultMag = (cmp > 0 ? subtract(mag, val.mag)
//                         : subtract(val.mag, mag));
//     resultMag = trustedStripLeadingZeroInts(resultMag);
//     return new BigInteger(resultMag, cmp == signum ? 1 : -1);
// }

// /**
//  * Subtracts the contents of the second int arrays (little) from the
//  * first (big).  The first int array (big) must represent a larger number
//  * than the second.  This method allocates the space necessary to hold the
//  * answer.
//  */
// private static int[] subtract(int[] big, int[] little) {
//     int bigIndex = big.length;
//     int result[] = new int[bigIndex];
//     int littleIndex = little.length;
//     long difference = 0;

//     // Subtract common parts of both numbers
//     while (littleIndex > 0) {
//         difference = (big[--bigIndex] & LONG_MASK) -
//                         (little[--littleIndex] & LONG_MASK) +
//                         (difference >> 32);
//         result[bigIndex] = (int)difference;
//     }

//     // Subtract remainder of longer number while borrow propagates
//     boolean borrow = (difference >> 32 != 0);
//     while (bigIndex > 0 && borrow)
//         borrow = ((result[--bigIndex] = big[bigIndex] - 1) == -1);

//     // Copy remainder of longer number
//     while (bigIndex > 0)
//         result[--bigIndex] = big[bigIndex];

//     return result;
// }