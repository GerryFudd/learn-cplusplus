

// // Division

// /**
//  * Returns a BigInteger whose value is {@code (this / val)}.
//  *
//  * @param  val value by which this BigInteger is to be divided.
//  * @return {@code this / val}
//  * @throws ArithmeticException if {@code val} is zero.
//  */
// public BigInteger divide(BigInteger val) {
//     if (val.mag.length < BURNIKEL_ZIEGLER_THRESHOLD ||
//             mag.length - val.mag.length < BURNIKEL_ZIEGLER_OFFSET) {
//         return divideKnuth(val);
//     } else {
//         return divideBurnikelZiegler(val);
//     }
// }

// /**
//  * Returns a BigInteger whose value is {@code (this / val)} using an O(n^2) algorithm from Knuth.
//  *
//  * @param  val value by which this BigInteger is to be divided.
//  * @return {@code this / val}
//  * @throws ArithmeticException if {@code val} is zero.
//  * @see MutableBigInteger#divideKnuth(MutableBigInteger, MutableBigInteger, boolean)
//  */
// private BigInteger divideKnuth(BigInteger val) {
//     MutableBigInteger q = new MutableBigInteger(),
//                         a = new MutableBigInteger(this.mag),
//                         b = new MutableBigInteger(val.mag);

//     a.divideKnuth(b, q, false);
//     return q.toBigInteger(this.signum * val.signum);
// }

// /**
//  * Returns an array of two BigIntegers containing {@code (this / val)}
//  * followed by {@code (this % val)}.
//  *
//  * @param  val value by which this BigInteger is to be divided, and the
//  *         remainder computed.
//  * @return an array of two BigIntegers: the quotient {@code (this / val)}
//  *         is the initial element, and the remainder {@code (this % val)}
//  *         is the final element.
//  * @throws ArithmeticException if {@code val} is zero.
//  */
// public BigInteger[] divideAndRemainder(BigInteger val) {
//     if (val.mag.length < BURNIKEL_ZIEGLER_THRESHOLD ||
//             mag.length - val.mag.length < BURNIKEL_ZIEGLER_OFFSET) {
//         return divideAndRemainderKnuth(val);
//     } else {
//         return divideAndRemainderBurnikelZiegler(val);
//     }
// }

// /** Long division */
// private BigInteger[] divideAndRemainderKnuth(BigInteger val) {
//     BigInteger[] result = new BigInteger[2];
//     MutableBigInteger q = new MutableBigInteger(),
//                         a = new MutableBigInteger(this.mag),
//                         b = new MutableBigInteger(val.mag);
//     MutableBigInteger r = a.divideKnuth(b, q);
//     result[0] = q.toBigInteger(this.signum == val.signum ? 1 : -1);
//     result[1] = r.toBigInteger(this.signum);
//     return result;
// }

// /**
//  * Returns a BigInteger whose value is {@code (this % val)}.
//  *
//  * @param  val value by which this BigInteger is to be divided, and the
//  *         remainder computed.
//  * @return {@code this % val}
//  * @throws ArithmeticException if {@code val} is zero.
//  */
// public BigInteger remainder(BigInteger val) {
//     if (val.mag.length < BURNIKEL_ZIEGLER_THRESHOLD ||
//             mag.length - val.mag.length < BURNIKEL_ZIEGLER_OFFSET) {
//         return remainderKnuth(val);
//     } else {
//         return remainderBurnikelZiegler(val);
//     }
// }

// /** Long division */
// private BigInteger remainderKnuth(BigInteger val) {
//     MutableBigInteger q = new MutableBigInteger(),
//                         a = new MutableBigInteger(this.mag),
//                         b = new MutableBigInteger(val.mag);

//     return a.divideKnuth(b, q).toBigInteger(this.signum);
// }

// /**
//  * Calculates {@code this / val} using the Burnikel-Ziegler algorithm.
//  * @param  val the divisor
//  * @return {@code this / val}
//  */
// private BigInteger divideBurnikelZiegler(BigInteger val) {
//     return divideAndRemainderBurnikelZiegler(val)[0];
// }

// /**
//  * Calculates {@code this % val} using the Burnikel-Ziegler algorithm.
//  * @param val the divisor
//  * @return {@code this % val}
//  */
// private BigInteger remainderBurnikelZiegler(BigInteger val) {
//     return divideAndRemainderBurnikelZiegler(val)[1];
// }

// /**
//  * Computes {@code this / val} and {@code this % val} using the
//  * Burnikel-Ziegler algorithm.
//  * @param val the divisor
//  * @return an array containing the quotient and remainder
//  */
// private BigInteger[] divideAndRemainderBurnikelZiegler(BigInteger val) {
//     MutableBigInteger q = new MutableBigInteger();
//     MutableBigInteger r = new MutableBigInteger(this).divideAndRemainderBurnikelZiegler(new MutableBigInteger(val), q);
//     BigInteger qBigInt = q.isZero() ? ZERO : q.toBigInteger(signum*val.signum);
//     BigInteger rBigInt = r.isZero() ? ZERO : r.toBigInteger(signum);
//     return new BigInteger[] {qBigInt, rBigInt};
// }

// /**
//  * Returns a BigInteger whose value is the greatest common divisor of
//  * {@code abs(this)} and {@code abs(val)}.  Returns 0 if
//  * {@code this == 0 && val == 0}.
//  *
//  * @param  val value with which the GCD is to be computed.
//  * @return {@code GCD(abs(this), abs(val))}
//  */
// public BigInteger gcd(BigInteger val) {
//     if (val.signum == 0)
//         return this.abs();
//     else if (this.signum == 0)
//         return val.abs();

//     MutableBigInteger a = new MutableBigInteger(this);
//     MutableBigInteger b = new MutableBigInteger(val);

//     MutableBigInteger result = a.hybridGCD(b);

//     return result.toBigInteger(1);
// }